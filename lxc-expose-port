#!/bin/sh
# Copyright (C) 2016-2017
# Author: Alexander E. Patrakov <patrakov@gmail.com>
# Sponsored by: NobleProg (R) Limited <http://www.nobleprog.co.uk>
# License: MIT

# Usage: mention this script in your container config, as follows:
#
# lxc.network.script.up = /path/to/lxc-expose-port 8080:80 2222:22 udp/9999:9999
# lxc.network.script.down = /path/to/lxc-expose-port
#
# The above will cause hosts's TCP port 8080 to be forwarded to port 80
# of the container, host's TCP port 2222 to port 22 of the container,
# and host's UDP port 9999 to port 9999 of the container


# LXC calls us with the following arguments:
# "lxc-expose-port" "$host_port1:$container_port1" "$host_port2:$container_port2" ... "$container_name" "net" "up" "veth" "$veth_interface"
# "lxc-expose-port" "$container_name" "net" "down" "veth" "$veth_interface"

# We are going to call lxc-info to figure out the IP address.
# We cannot do this now because:
# 1. The container needs some time to actually obtain its IP address
# 2. Calling lxc tools from a callout script would deadlock

if [ -z "$EXPOSE_BACKGROUNDED" ] ; then
    EXPOSE_BACKGROUNDED=1 \
    "$0" "$@" </dev/null >> /var/log/lxc-expose-port.log 2>&1 &
    exit 0
fi

# So all arguments except the last five are port mappings.

echo "####### $0 $@"

. /etc/default/lxc-net

exposed_ports=""

while [ "$#" -gt 5 ] ; do
    exposed_ports="$exposed_ports $1"
    shift
done

container_name="$1"
action="$3"
veth_interface="$5"

script="/var/run/lxc-expose-port/$container_name.sh"
timeout=60

ip_in_subnet() {
    local ip="$1"
    local subnet="$2"
    # Filter out IPv6
    if [ "${ip#*:}" != "$ip" ] ; then return 1 ; fi

    local network=${subnet%/*}
    local netmask=${subnet#*/}


    local a b c d e f g h

    IFS="." read a b c d e f g h <<EOF
$ip.$network
EOF
    local ipnum=$(( ( a << 24 ) | ( b << 16 ) | ( c << 8 ) | d ))
    local networknum=$(( ( e << 24 ) | ( f << 16 ) | ( g << 8 ) | h ))

    if [ "$netmask" -eq 32 ] ; then
        [ $ipnum -eq $networknum ]
    else
        [ $(( ipnum >> ( 32 - netmask ) )) -eq $(( networknum >> ( 32 - netmask ) )) ]
    fi
}

find_good_ip() {
    local ips="$1"
    local ip=
    for ip in $ips ; do
        if ip_in_subnet "$ip" "$LXC_NETWORK" ; then
            echo $ip
            break
        fi
    done
}

if [ "$action" = "up" ] ; then
    ip=
    for attempt in `seq 1 $timeout` ; do
        sleep 1
        if [ -z "$( lxc-info -H -p -n "$container_name" )" ] ; then
            # The container no longer exists
            exit 1
        fi

        ips=$( lxc-info -H -i -n "$container_name" )
        if [ "$?" != 0 ] ; then
            # something failed
            exit 1
        fi
        ip=$( find_good_ip "$ips" )
        if [ -n "$ip" ] ; then
            break
        fi
    done
    if [ -z "$ip" ] ; then
        exit 1
    fi

    echo container_name="$1" action="$3" veth_interface="$5" ip="$ip"
    mkdir -p /var/run/lxc-expose-port

    # Later we cannot execute this file, for some unknown reason (AppArmor?)
    # that is not fixable by chmod, so prepare to source it
    : > "$script"

    for item in $exposed_ports ; do
        protocol=tcp
        if [ "${item#udp/}" != "$item" ] ; then
            protocol=udp
            item=${item#udp/}
        fi
        if [ "${item#tcp/}" != "$item" ] ; then
            item=${item#tcp/}
        fi

        host_ports=${item%:*}
        container_ports=${item#*:}
        echo "Would forward $protocol port $host_ports to $container_ports"
        host_ports_c=`echo "$host_ports" | sed 's/-/:/g'`
        container_ports_c=`echo "$container_ports" | sed 's/-/:/g'`
        cat >> "$script" <<EOF

        iptables -w -t nat \$AD PREROUTING ! -d 127.0.0.0/8 -p $protocol -m addrtype --dst-type LOCAL -m $protocol -m multiport --dports "$host_ports_c" \
            -m comment --comment "Container $container_name port forwarding" -j DNAT --to-destination "$ip:$container_ports"
        iptables -w -t nat \$AD OUTPUT ! -d 127.0.0.0/8 -p $protocol -m addrtype --dst-type LOCAL -m $protocol -m multiport --dports "$host_ports_c" \
            -m comment --comment "Container $container_name host communication" -j DNAT --to-destination "$ip:$container_ports"
        iptables -w -t nat \$AD POSTROUTING -s "$LXC_NETWORK" -d "$ip" -p $protocol -m $protocol -m multiport --dports "$container_ports_c" \
            -m comment --comment "Container $container_name hairpin NAT" -j MASQUERADE
EOF
    done
    (
        flock 9
        AD="-A"
        . "$script"
    ) 9> /var/run/lxc-expose-port/lock
else
    # For some unknown reason, the stop hook is fired twice. So serialize it.
    (
        flock 9
        if [ -f "$script" ] ; then
            AD="-D"
            . "$script"
            rm -f "$script"
        fi
    ) 9> /var/run/lxc-expose-port/lock
fi

exit 0
